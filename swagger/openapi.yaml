openapi: 3.0.3
info:
  title: Swagger Machine Go Server - OpenAPI 3.0
  description: ''
  contact:
    email: dantaspm@icloud.com
  license:
    name: MIT
    url: https://opensource.org/license/mit/
  version: 0.1.0
servers:
  - url: http://localhost:3000/v1
tags:
  - name: user
    description: Everything about user
  - name: admin
    description: Administration tools
  - name: machine
    description: Operations of machine
paths:
  /admin/list-user:
    get:
      tags:
        - admin
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: The User List Page
          required: false
          schema:
            type: integer
      summary: List all users
      description: This will list all registered users and their status.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUser'
        '401':
          description: Unauthorized
  /admin/list-machines:
    get:
      tags:
        - admin
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: The Machine List Page
          required: false
          schema:
            type: integer
      summary: List all machines
      description: This will list all the machines and the details.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMachines'
        '401':
          description: Unauthorized
  /admin/list-log:
    get:
      tags:
        - admin
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: The Logs List Page
          required: false
          schema:
            type: integer
      summary: List all logs
      description: This will list all the logs and the details.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLogs'
        '401':
          description: Unauthorized
  /admin/list-log-types:
    get:
      tags:
        - admin
      security:
        - bearerAuth: []
      summary: list all log types
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLogType'
        '401':
          description: Unauthorized
  /admin/list-token:
    get:
      tags:
        - admin
      security:
        - bearerAuth: []
      summary: list all tokens and details
      description: only superusers can list tokens
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTokens'
        '401':
          description: Unauthorized
  /admin/disable-machine/{machineId}:
    get:
      tags:
        - admin
      summary: disable machine
      security:
        - bearerAuth: []
      parameters:
        - name: machineId
          in: path
          description: machine id to deactivate
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successfully deactivated
          content:
            aplication/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          description: error disable machine
          content:
            aplication/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          
  /admin/disable-user/{userId}:
    get:
      tags:
        - admin
      summary: disable user
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: user id to deactivate
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successfully deactivated
          content:
            aplication/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          description: error disable user
          content:
            aplication/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          
  /admin/enabled-machine/{machineId}:
    get:
      tags:
        - admin
      summary: enabled machine
      security:
        - bearerAuth: []
      parameters:
        - name: machineId
          in: path
          description: machine id to activate
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successfully activated
          content:
            aplication/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          description: error enabled machine
          content:
            aplication/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          
  /admin/enabled-user/{userId}:
    get:
      tags:
        - admin
      summary: enabled user
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: user id to activate
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successfully activated
          content:
            aplication/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          description: error enabled user
          content:
            aplication/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          
  /admin/update-level:
    put:
      tags:
        - admin
      summary: update user level
      description: 'levels above >11 are super users'
      security:
        - bearerAuth: []
      requestBody:
        content:
          aplication/json:
            schema:
              $ref: '#/components/schemas/UpdateLeve'
      responses:
        '200':
          description: successfully activated
          content:
            aplication/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          description: error enabled user
          content:
            aplication/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          
  /user/auth:
    post:
      tags:
        - user
      summary: login with username and password
      description: ''
      requestBody:
        description: user credentials
        content:
          aplication/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: successfully logged in
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/AuthResponseSuccess'
        '400':
          description: login error
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/ErrorRequest'
  /user/register:
    post:
      tags:
        - user
      summary: register a new user
      description: default users are logged off
      requestBody:
        description: user credentials
        content:
          aplication/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '201':
          description: successfully registered
        '400':
          description: error registering
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/ErrorRequest'
    get:
      tags:
        - user
      summary: check if user is registered
      description: ''
      parameters:
        - name: username
          in: query
          description: username to check
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            aplication/json:
              schema:
                type: object
                properties:
                  register:
                    type: boolean
  /user:
    get:
      tags:
        - user
      summary: user info
      security:
        - bearerAuth: []
      description: ''
      responses:
        '200':
          description: ''
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
    put:
      tags:
        - user
      summary: update user
      security:
        - bearerAuth: []
      description: ''
      requestBody:
        description: data to change
        content:
          aplication/json:
            schema:
              type: object
              properties:
                password:
                  type: string
      responses:
        '200':
          description: ''
          content:
            aplication/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          description: ''
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/ErrorRequest'
        '401':
          description: Unauthorized
  /machine:
    post:
      tags:
        - machine
      summary: machine controller
      description: ''
      requestBody:
        description: data machine info
        content:
          aplication/json:
            schema:
              type: object
              properties:
                data:
                  type: string
      responses:
        '200':
          description: ''
          content:
            aplication/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
        '401':
          description: ''
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/ErrorRequest'
        '403':
          description: ''
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/ErrorRequest'
        '500':
          description: ''
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/ErrorRequest'
components:
  schemas:
    ListUser:
      type: object
      properties:
        count:
          type: integer
          format: int
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserListInfo'
    ListMachines:
      type: object
      properties:
        count:
          type: integer
          format: int
        data:
          type: array
          items:
            $ref: '#/components/schemas/MachineListInfo'
    ListLogType:
      type: object
      properties:
        count:
          type: integer
          format: int
        data:
          type: array
          items:
            type: string
    ListLogs:
      type: object
      properties:
        count:
          type: integer
          format: int
        data:
          type: array
          items:
            $ref: '#/components/schemas/LogsListInfo'
    ListTokens:
      type: object
      properties:
        count:
          type: integer
          format: int
        data:
          type: array
          items:
            $ref: '#/components/schemas/TokenListInfo'
    TokenListInfo:
      type: object
      properties:
        session_id:
          type: integer
        user_identity:
          type: integer
        session_token:
          type: string
        exp:
          type: integer
          format: int64
        iat:
          type: integer
          format: int64
        status:
          type: boolean
    UserListInfo:
      type: object
      properties:
        id:
          type: integer
          format: int
        username:
          type: string
        active:
          type: boolean
        created_at:
          type: string
          format: date-time
    MachineListInfo:
      type: object
      properties:
        machine_name:
          type: string
        machine_plataform:
          type: string
        active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    LogsListInfo:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        description:
          type: string
        user_id:
          type: integer
        created_at:
          type: string
          format: date-time
    ErrorRequest:
      type: object
      properties:
        error:
          type: string
    AuthRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        passowrd:
          type: string
          minLength: 6
          maxLength: 150
    AuthResponseSuccess:
      type: object
      properties:
        expire:
          type: integer
        token:
          type: string
          format: uuid
        token_type:
          type: string
    UserInfo:
      type: object
      properties:
        username:
          type: string
        active:
          type: boolean
        created_at:
          type: string
          format: date-time
    UpdateLeve:
      type: object
      properties:
        level:
          type: integer
          minimum: 1
          maximum: 15
        id:
          type: integer
          description: 'user id to be modified'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
